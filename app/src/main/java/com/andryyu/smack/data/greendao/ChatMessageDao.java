package com.andryyu.smack.data.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.andryyu.smack.entity.ChatMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_MESSAGE".
*/
public class ChatMessageDao extends AbstractDao<ChatMessage, Long> {

    public static final String TABLENAME = "CHAT_MESSAGE";

    /**
     * Properties of entity ChatMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uuid = new Property(1, String.class, "uuid", false, "UUID");
        public final static Property Message = new Property(2, String.class, "message", false, "MESSAGE");
        public final static Property MessageType = new Property(3, int.class, "messageType", false, "MESSAGE_TYPE");
        public final static Property FriendUserName = new Property(4, String.class, "friendUserName", false, "FRIEND_USER_NAME");
        public final static Property FriendNickName = new Property(5, String.class, "friendNickName", false, "FRIEND_NICK_NAME");
        public final static Property MeUserName = new Property(6, String.class, "meUserName", false, "ME_USER_NAME");
        public final static Property MeNickName = new Property(7, String.class, "meNickName", false, "ME_NICK_NAME");
        public final static Property DateTime = new Property(8, String.class, "dateTime", false, "DATE_TIME");
        public final static Property IsMeSend = new Property(9, boolean.class, "isMeSend", false, "IS_ME_SEND");
        public final static Property FilePath = new Property(10, String.class, "filePath", false, "FILE_PATH");
        public final static Property FileLoadState = new Property(11, int.class, "fileLoadState", false, "FILE_LOAD_STATE");
        public final static Property IsMulti = new Property(12, boolean.class, "isMulti", false, "IS_MULTI");
    }


    public ChatMessageDao(DaoConfig config) {
        super(config);
    }
    
    public ChatMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_MESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UUID\" TEXT UNIQUE ," + // 1: uuid
                "\"MESSAGE\" TEXT," + // 2: message
                "\"MESSAGE_TYPE\" INTEGER NOT NULL ," + // 3: messageType
                "\"FRIEND_USER_NAME\" TEXT," + // 4: friendUserName
                "\"FRIEND_NICK_NAME\" TEXT," + // 5: friendNickName
                "\"ME_USER_NAME\" TEXT," + // 6: meUserName
                "\"ME_NICK_NAME\" TEXT," + // 7: meNickName
                "\"DATE_TIME\" TEXT," + // 8: dateTime
                "\"IS_ME_SEND\" INTEGER NOT NULL ," + // 9: isMeSend
                "\"FILE_PATH\" TEXT," + // 10: filePath
                "\"FILE_LOAD_STATE\" INTEGER NOT NULL ," + // 11: fileLoadState
                "\"IS_MULTI\" INTEGER NOT NULL );"); // 12: isMulti
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatMessage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(2, uuid);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(3, message);
        }
        stmt.bindLong(4, entity.getMessageType());
 
        String friendUserName = entity.getFriendUserName();
        if (friendUserName != null) {
            stmt.bindString(5, friendUserName);
        }
 
        String friendNickName = entity.getFriendNickName();
        if (friendNickName != null) {
            stmt.bindString(6, friendNickName);
        }
 
        String meUserName = entity.getMeUserName();
        if (meUserName != null) {
            stmt.bindString(7, meUserName);
        }
 
        String meNickName = entity.getMeNickName();
        if (meNickName != null) {
            stmt.bindString(8, meNickName);
        }
 
        String dateTime = entity.getDateTime();
        if (dateTime != null) {
            stmt.bindString(9, dateTime);
        }
        stmt.bindLong(10, entity.getIsMeSend() ? 1L: 0L);
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(11, filePath);
        }
        stmt.bindLong(12, entity.getFileLoadState());
        stmt.bindLong(13, entity.getIsMulti() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatMessage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(2, uuid);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(3, message);
        }
        stmt.bindLong(4, entity.getMessageType());
 
        String friendUserName = entity.getFriendUserName();
        if (friendUserName != null) {
            stmt.bindString(5, friendUserName);
        }
 
        String friendNickName = entity.getFriendNickName();
        if (friendNickName != null) {
            stmt.bindString(6, friendNickName);
        }
 
        String meUserName = entity.getMeUserName();
        if (meUserName != null) {
            stmt.bindString(7, meUserName);
        }
 
        String meNickName = entity.getMeNickName();
        if (meNickName != null) {
            stmt.bindString(8, meNickName);
        }
 
        String dateTime = entity.getDateTime();
        if (dateTime != null) {
            stmt.bindString(9, dateTime);
        }
        stmt.bindLong(10, entity.getIsMeSend() ? 1L: 0L);
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(11, filePath);
        }
        stmt.bindLong(12, entity.getFileLoadState());
        stmt.bindLong(13, entity.getIsMulti() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChatMessage readEntity(Cursor cursor, int offset) {
        ChatMessage entity = new ChatMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uuid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // message
            cursor.getInt(offset + 3), // messageType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // friendUserName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // friendNickName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // meUserName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // meNickName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // dateTime
            cursor.getShort(offset + 9) != 0, // isMeSend
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // filePath
            cursor.getInt(offset + 11), // fileLoadState
            cursor.getShort(offset + 12) != 0 // isMulti
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatMessage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUuid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMessage(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMessageType(cursor.getInt(offset + 3));
        entity.setFriendUserName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFriendNickName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMeUserName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMeNickName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDateTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsMeSend(cursor.getShort(offset + 9) != 0);
        entity.setFilePath(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFileLoadState(cursor.getInt(offset + 11));
        entity.setIsMulti(cursor.getShort(offset + 12) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChatMessage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChatMessage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatMessage entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
